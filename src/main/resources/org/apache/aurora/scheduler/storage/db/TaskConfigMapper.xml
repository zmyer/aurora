<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.apache.aurora.scheduler.storage.db.TaskConfigMapper">
  <cache type="org.apache.aurora.scheduler.storage.db.MyBatisCacheImpl">
    <property name="size" value="1000"/>
  </cache>
  <insert id="insert" useGeneratedKeys="true" keyColumn="id" keyProperty="result.id">
    INSERT INTO task_configs (
      job_key_id,
      creator_user,
      service,
      num_cpus,
      ram_mb,
      disk_mb,
      priority,
      max_task_failures,
      production,
      contact_email,
      executor_name,
      executor_data,
      tier
    ) VALUES (
      (
        SELECT ID
        FROM job_keys
        WHERE role = #{config.job.role}
          AND environment = #{config.job.environment}
          AND name = #{config.job.name}
      ),
      #{config.owner.user},
      #{config.isService},
      #{config.numCpus},
      #{config.ramMb},
      #{config.diskMb},
      #{config.priority},
      #{config.maxTaskFailures},
      #{config.production},
      #{config.contactEmail},
      #{config.executorConfig.name},
      #{config.executorConfig.data},
      #{config.tier}
    )
  </insert>

  <resultMap id="limitConstraintMap" type="org.apache.aurora.gen.LimitConstraint">
    <id column="id"/>
  </resultMap>

  <resultMap id="valueConstraintMap" type="org.apache.aurora.gen.ValueConstraint">
    <id column="id"/>

    <collection property="values" ofType="String" columnPrefix="v_">
      <result column="value" />
    </collection>
  </resultMap>

  <resultMap id="taskConstraintMap" type="org.apache.aurora.scheduler.storage.db.views.DbTaskConstraint">
    <id column="id"/>
    <association property="value" resultMap="valueConstraintMap" columnPrefix="v_"/>
    <association property="limit" resultMap="limitConstraintMap" columnPrefix="l_"/>
  </resultMap>

  <resultMap id="constraintMap" type="org.apache.aurora.scheduler.storage.db.views.DbConstraint">
    <id column="id"/>
    <association property="constraint" resultMap="taskConstraintMap"/>
  </resultMap>

  <resultMap id="dockerParameterMap" type="org.apache.aurora.gen.DockerParameter">
    <id column="id"/>
  </resultMap>

  <select id="selectDockerParameters" resultMap="dockerParameterMap">
    SELECT
      id,
      name,
      value
    FROM task_config_docker_container_parameters
    WHERE container_id = #{id}
  </select>

  <resultMap id="dockerContainerMap" type="org.apache.aurora.gen.DockerContainer">
    <id column="id"/>
    <result column="docker_image" property="image"/>
    <collection
        property="parameters"
        select="selectDockerParameters"
        column="id"
        foreignColumn="container_id"/>
  </resultMap>

  <resultMap id="dockerImageMap" type="org.apache.aurora.gen.DockerImage">
    <id column="id" />
  </resultMap>

  <resultMap id="appcImageMap" type="org.apache.aurora.gen.AppcImage">
    <id column="id" />
  </resultMap>

  <resultMap id="imageMap" type="org.apache.aurora.scheduler.storage.db.views.DbImage">
    <association property="appc" columnPrefix="appc_" resultMap="appcImageMap" />
    <association property="docker" columnPrefix="docker_" resultMap="dockerImageMap" />
  </resultMap>

  <resultMap id="containerMap" type="org.apache.aurora.scheduler.storage.db.views.DbContainer">
    <association property="docker" resultMap="dockerContainerMap" />
    <association property="image" columnPrefix="image_" resultMap="imageMap" />
    <collection property="volumes" columnPrefix="volume_" resultMap="volumeMap" notNullColumn="id" />
  </resultMap>

  <resultMap id="metadataMap" type="org.apache.aurora.gen.Metadata">
    <id column="id" />
  </resultMap>

  <resultMap id="mesosFetcherUrisMap" type="org.apache.aurora.gen.MesosFetcherURI">
    <id column="id" />
  </resultMap>

  <resultMap id="volumeMap" type="org.apache.aurora.gen.Volume">
    <id column="id" />
    <result property="mode" column="mode" typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.VolumeModeTypeHandler" />
  </resultMap>

  <resultMap id="resourceMap" type="org.apache.aurora.scheduler.storage.db.views.DBResource">
    <id column="id" />
    <result property="type"
            column="type_id"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.ResourceTypeHandler" />
  </resultMap>

  <resultMap id="taskConfigMap" type="org.apache.aurora.scheduler.storage.db.views.DbTaskConfig">
    <id column="id" property="rowId" />
    <result column="creator_user" property="owner.user"/>
    <result column="executor_name" property="executorConfig.name"/>
    <result column="executor_data" property="executorConfig.data"/>
    <association
        property="job"
        resultMap="org.apache.aurora.scheduler.storage.db.JobKeyMapper.jobKeyMap"
        columnPrefix="j_"/>
    <association property="container" resultMap="containerMap" columnPrefix="c_"/>
    <collection
        property="constraints"
        columnPrefix="constraint_"
        resultMap="constraintMap"/>
    <collection property="requestedPorts" ofType="String" columnPrefix="p_">
      <result column="port_name" />
    </collection>
    <collection property="metadata" resultMap="metadataMap" columnPrefix="m_"/>
    <collection property="mesosFetcherUris" resultMap="mesosFetcherUrisMap" columnPrefix="u_"/>
    <collection
        property="taskLinks"
        select="selectTaskLinks"
        column="id"
        foreignColumn="task_config_id"/>
    <!-- TODO(maxim): move resources to a main join when task level fields are removed. -->
    <collection
        property="resources"
        select="selectResources"
        column="id"
        foreignColumn="task_config_id" />
  </resultMap>

  <sql id="unscopedConfigSelect">
    SELECT
      c.id AS id,
      c.creator_user AS creator_user,
      c.service AS is_service,
      c.num_cpus AS num_cpus,
      c.ram_mb AS ram_mb,
      c.disk_mb AS disk_mb,
      c.priority AS priority,
      c.max_task_failures AS max_task_failures,
      c.production AS production,
      c.contact_email AS contact_email,
      c.executor_name AS executor_name,
      c.executor_data AS executor_data,
      c.tier AS tier,
      j.role AS j_role,
      j.environment AS j_environment,
      j.name AS j_name,
      p.port_name AS p_port_name,
      d.id AS c_id,
      d.image AS c_docker_image,
      m.id AS m_id,
      m.key AS m_key,
      m.value AS m_value,
      u.id AS u_id,
      u.value AS u_value,
      u.extract AS u_extract,
      u.cache AS u_cache,
      di.name as c_image_docker_name,
      di.tag as c_image_docker_tag,
      ai.name as c_image_appc_name,
      ai.image_id as c_image_appc_image_id,
      v.id as c_volume_id,
      v.host_path as c_volume_host_path,
      v.container_path as c_volume_container_path,
      v.mode as c_volume_mode,
      tc.id AS constraint_id,
      tc.name AS constraint_name,
      tlc.id AS constraint_l_id,
      tlc.value AS constraint_l_limit,
      tvc.id AS constraint_v_id,
      tvc.negated AS constraint_v_negated,
      tvcv.value as constraint_v_v_value
    FROM task_configs AS c
    INNER JOIN job_keys AS j ON j.id = c.job_key_id
    LEFT OUTER JOIN task_config_requested_ports AS p ON p.task_config_id = c.id
    LEFT OUTER JOIN task_config_docker_containers AS d ON d.task_config_id = c.id
    LEFT OUTER JOIN task_config_metadata AS m ON m.task_config_id = c.id
    LEFT OUTER JOIN task_config_mesos_fetcher_uris AS u ON u.task_config_id = c.id
    LEFT OUTER JOIN task_config_docker_images AS di ON di.task_config_id = c.id
    LEFT OUTER JOIN task_config_appc_images AS ai ON ai.task_config_id = c.id
    LEFT OUTER JOIN task_config_volumes AS v ON v.task_config_id = c.id
    LEFT OUTER JOIN task_constraints AS tc ON tc.task_config_id = c.id
    LEFT OUTER JOIN limit_constraints as tlc ON tlc.constraint_id = tc.id
    LEFT OUTER JOIN value_constraints as tvc ON tvc.constraint_id = tc.id
    LEFT OUTER JOIN value_constraint_values AS tvcv ON tvcv.value_constraint_id = tvc.id
  </sql>

  <select id="selectConfig" resultMap="taskConfigMap">
    <include refid="unscopedConfigSelect"/>
    WHERE c.id = #{id}
  </select>

  <select id="selectConfigsByJob" resultMap="taskConfigMap">
    <include refid="unscopedConfigSelect"/>
    WHERE j.role = #{role}
      AND j.environment = #{environment}
      AND j.name = #{name}
  </select>

  <insert id="insertConstraint" useGeneratedKeys="true" keyColumn="id" keyProperty="result.id">
    INSERT INTO task_constraints (
      task_config_id,
      name
    ) VALUES (
      #{configId},
      #{constraint.name}
    )
  </insert>

  <insert id="insertLimitConstraint">
    INSERT INTO limit_constraints (
      constraint_id,
      value
    ) VALUES (
      #{constraintId},
      #{constraint.limit}
    )
  </insert>

  <insert id="insertValueConstraint" useGeneratedKeys="true" keyColumn="id" keyProperty="result.id">
    INSERT INTO value_constraints (
      constraint_id,
      negated
    ) VALUES (
      #{constraintId},
      #{constraint.negated}
    )
  </insert>

  <insert id="insertValueConstraintValues">
    INSERT INTO value_constraint_values (
      value_constraint_id,
      value
    ) VALUES (
      <foreach item="value" collection="values" separator="),(">
        #{valueConstraintId},
        #{value}
      </foreach>
    )
  </insert>

  <insert id="insertRequestedPorts">
    INSERT INTO task_config_requested_ports (
      task_config_id,
      port_name
    ) VALUES (
      <foreach item="port" collection="ports" separator="),(">
        #{configId},
        #{port}
      </foreach>
    )
  </insert>

  <insert id="insertResources">
    INSERT INTO task_resource (
      task_config_id,
      type_id,
      value
    ) VALUES (
      <foreach item="value" collection="values" separator="),(">
        #{configId},
        #{value.first},
        #{value.second}
      </foreach>
    )
  </insert>

  <insert id="insertTaskLinks" >
    INSERT INTO task_config_task_links (
      task_config_id,
      label,
      url
    ) VALUES (
      <foreach index="label" item="url" collection="links" separator="),(">
        #{configId},
        #{label},
        #{url}
      </foreach>
    )
  </insert>

  <resultMap id="taskLinkMap" type="org.apache.aurora.common.collections.Pair">
    <constructor>
      <arg column="label"/>
      <arg column="url"/>
    </constructor>
  </resultMap>

  <select id="selectTaskLinks" resultMap="taskLinkMap">
    SELECT
      id,
      label,
      url
    FROM task_config_task_links
    WHERE task_config_id = #{id}
  </select>

  <select id="selectResources" resultMap="resourceMap">
    SELECT
      id,
      type_id,
      value
    FROM task_resource
    WHERE task_config_id = #{id}
  </select>

  <insert id="insertContainer" useGeneratedKeys="true" keyColumn="id" keyProperty="result.id">
    INSERT INTO task_config_docker_containers (
      task_config_id,
      image
    ) VALUES (
      #{configId},
      #{container.image}
    )
  </insert>

  <insert id="insertDockerParameters">
    INSERT INTO task_config_docker_container_parameters (
      container_id,
      name,
      value
    ) VALUES (
    <foreach item="parameter" collection="parameters" separator="),(">
      #{containerId},
      #{parameter.name},
      #{parameter.value}
    </foreach>
    )
  </insert>

  <insert id="insertDockerImage">
    INSERT INTO task_config_docker_images (
      task_config_id,
      name,
      tag
    ) VALUES (
      #{configId},
      #{name},
      #{tag}
    )
  </insert>

  <insert id="insertAppcImage">
    INSERT INTO task_config_appc_images (
      task_config_id,
      name,
      image_id
    ) VALUES (
      #{configId},
      #{name},
      #{imageId}
    )
  </insert>

  <insert id="insertMetadata">
    INSERT INTO task_config_metadata (
      task_config_id,
      key,
      value
    ) VALUES (
    <foreach item="entry" collection="metadata" separator="),(">
      #{configId},
      #{entry.key},
      #{entry.value}
    </foreach>
    )
  </insert>

  <insert id="insertMesosFetcherUris">
    INSERT INTO task_config_mesos_fetcher_uris (
      task_config_id,
      value,
      extract,
      cache
    ) VALUES (
    <foreach item="entry" collection="uris" separator="),(">
      #{configId},
      #{entry.value},
      #{entry.extract},
      #{entry.cache}
    </foreach>
    )
  </insert>

  <insert id="insertVolumes">
    INSERT INTO task_config_volumes (
      task_config_id,
      host_path,
      container_path,
      mode
    ) VALUES (
    <foreach item="volume" collection="volumes" separator="),(">
      #{configId},
      #{volume.hostPath},
      #{volume.containerPath},
      #{volume.mode, typeHandler=org.apache.aurora.scheduler.storage.db.typehandlers.VolumeModeTypeHandler}
    </foreach>
    )
  </insert>

  <select id="selectAllRowIds" resultType="long">
    SELECT id FROM task_configs
  </select>

  <delete id="deleteRow">
    DELETE FROM task_configs WHERE id = #{rowId}
  </delete>
</mapper>
